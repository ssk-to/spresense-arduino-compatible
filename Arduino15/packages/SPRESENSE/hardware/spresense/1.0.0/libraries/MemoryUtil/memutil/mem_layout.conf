############################################################################
# examples/audo_player/config/mem_layout.conf
#
#   Copyright 2018 Sony Semiconductor Solutions Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of Sony Semiconductor Solutions Corporation nor
#    the names of its contributors may be used to endorse or promote
#    products derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

#############################################################################
# MemoryManager Configuration
#
UseFence = true  # Use of a pool fence

require "mem_layout.rb"

#############################################################################
# User defined constants
#  Start with "U_" so that it does not overlap with the definition
#  in the script, only upper case letters, numbers and "_".
#  When defined with a name starting with "U_MEM_",
#  macros of the same name are output to output_header
#
U_STD_ALIGN  = 8          # standard alignment
U_TILE_ALIGN = 0x20000    # Memory Tile Align 128KB

#############################################################################
# Memory device definition
#  The name_ADDR macro and the name_SIZE macro are output to output_header
#
# name: Device name (3 or more characters, starting with upper case letters,
#                    capital letters, numbers, "_" can be used)
# ram : True if the device is RAM. False otherwise
# addr: Address (value of multiples of 4)
# size: Size in bytes (values of multiples of 4 excluding 0)
#
MemoryDevices.init(
  # name         ram    addr        size
  ["SHM_SRAM",   true,  0x000c0000, 0x00040000],
  nil # end of definition
)

#############################################################################
# Fixed area definition
#  name_ALIGN, name_ADDR, name_SIZE macros are output to output_header
#  If the fence is valid, the name_L_FENCE and name _U_FENCE macros
#  are also output
#
# name  : Area name (name beginning with uppercase letters and ending
#                    with "_AREA", uppercase letters,
#                    numbers, "_" can be used)
# device: Device name of MemoryDevices securing space
# align : Starting alignment of the region.
#         Specify a multiple of MinAlign (= 4) except 0
# size  : Starting alignment of the region.
#         Specify a multiple of MinAlign (= 4) except 0
#         In the final area of each device, you can specify RemainderSize
#         indicating the remaining size
# fence : Specify validity / invalidity of fence
#         (This item is ignored when UseFence is false)
#
FixedAreas.init(
  # name,                  device,    align,       size,          fence
  ["COMMON_WORK_AREA",    "SHM_SRAM", U_STD_ALIGN,  0x0003d000,   false], 
  ["MSG_QUE_AREA",        "SHM_SRAM", U_STD_ALIGN,  0x00002c00,   false], # DSP1 message queue area 
  ["MEMMGR_WORK_AREA",    "SHM_SRAM", U_STD_ALIGN,  0x00000200,   false], # MemMgrLite WORK Area
  ["MEMMGR_DATA_AREA",    "SHM_SRAM", U_STD_ALIGN,  0x00000100,   false], # MemMgrLite DATA Area
  nil # end of definition
)

##############################################################################
# Pool layout definition
#  For output_header, pool ID and NUM_MEM_POOLS, NUM_MEM_LAYOUTS and
#  Lx_name_ALIGN, Lx_name_ADDR, Lx_name_SIZE, Lx_name_NUM_SEG, Lx_name_SEG_SIZE
#  Macros are output (x is the layout number)
#  If the fence is valid, the Lx_name_L_FENCE and Lx_name_U_FENCE macros
#  are also output
#
# name : Pool name (name beginning with upper case letters and ending
#        with "_POOL", upper case letters, numbers, "_" can be used)
# area : Area name of FixedArea to be used as pool area.
#        The area must be located in the RAM
# align: Starting alignment of the pool.
#        Specify a multiple of MinAlign (= 4) except 0
# size : Size of the pool. A value of a multiple of 4 except 0.
#        In the Basic pool, you can specify segment size * number of segments.
#        In the final area of each area, RemainderSize indicating
#        the remaining size can be specified
# seg  : Specify the number of segments (1 or more, 255 or 65535 or less).
#        See UseOver255Segments.
#        For Basic pool, size / seg is the size of each segment
#        (the remainder is ignored)
# fence: Specify whether the fence is valid or invalid.
#        This item is ignored when UseFence is false
#

#---------------------#
# Setting for normal mode
#---------------------#
# Player
# Definition for DEC_ES_MAIN_BUF_POOL
U_DEC_ES_MAIN_BUF_SIZE = 6144 # (1024sample * 2ch * 3 bytes) for 192kHz, 24bit Wav stream (= ES_BUFF_SIZE defined in player_obj.cpp)
U_DEC_ES_MAIN_BUF_SEG_NUM = 4
U_DEC_ES_MAIN_BUF_POOL_SIZE = U_DEC_ES_MAIN_BUF_SIZE * U_DEC_ES_MAIN_BUF_SEG_NUM

# Definition for REND_PCM_BUF_POOL
U_REND_PCM_BUF_SIZE = 18000 #(1025sample * 2ch * 4bytes * (192kHz/88.2kHz))
                            #(1025sample = 1024sample + 1sample for clock recovery)
U_REND_PCM_BUF_SEG_NUM = U_DEC_ES_MAIN_BUF_SEG_NUM + 1 # +1 because considering Flush extrusion by Stop command
U_REND_PCM_BUF_POOL_SIZE = U_REND_PCM_BUF_SIZE * U_REND_PCM_BUF_SEG_NUM

# Definition for SRC_WORK_MAIN_BUF_POOL
U_SRC_WORK_MAIN_BUF_SIZE = 8192 # (1024sample * 2ch * 4bytes) for 192kHz,
U_SRC_WORK_MAIN_BUF_SEG_NUM = 1
U_SRC_WORK_MAIN_BUF_POOL_SIZE = U_SRC_WORK_MAIN_BUF_SIZE * U_SRC_WORK_MAIN_BUF_SEG_NUM;

# Definition for DEC_ES_SUB_BUF_POOL
U_DEC_ES_SUB_BUF_SIZE = 6144 # (768sample * 2ch * 2byte ) for Wav stream
U_DEC_ES_SUB_BUF_SEG_NUM = 4
U_DEC_ES_SUB_BUF_POOL_SIZE = U_DEC_ES_SUB_BUF_SIZE * U_DEC_ES_SUB_BUF_SEG_NUM

# Definition for REND_PCM_SUB_BUF_POOL
U_REND_PCM_SUB_BUF_SIZE = 8200 #(1025sample * 2ch * 4bytes * (192kHz/192kHz))
                               #(1025sample = 1024sample + 1sample for clock recovery)
U_REND_PCM_SUB_BUF_SEG_NUM = U_DEC_ES_SUB_BUF_SEG_NUM + 1  # +1 because considering Flush extrusion by Stop command
U_REND_PCM_SUB_BUF_POOL_SIZE = U_REND_PCM_SUB_BUF_SIZE * U_REND_PCM_SUB_BUF_SEG_NUM

# Definition for SRC_WORK_SUB_BUF_POOL
U_SRC_WORK_SUB_BUF_SIZE = 8192 # (1024sample * 2ch * 4bytes) for 192kHz,
U_SRC_WORK_SUB_BUF_SEG_NUM = 1
U_SRC_WORK_SUB_BUF_POOL_SIZE = U_SRC_WORK_SUB_BUF_SIZE * U_SRC_WORK_SUB_BUF_SEG_NUM;

# Definition for PF0/1_PCM_BUF_POOL
U_POF_PCM_BUF_SIZE = U_REND_PCM_BUF_SIZE
U_POF_PCM_BUF_SEG_NUM = 1
U_POF_PCM_BUF_POOL_SIZE = U_POF_PCM_BUF_SIZE * U_POF_PCM_BUF_SEG_NUM
 
# Definition for DEC_APU_CMD_POOL
U_APU_CMD_SIZE = 92
U_DEC_APU_CMD_SEG_NUM = 10
U_DEC_APU_CMD_POOL_SIZE = U_APU_CMD_SIZE * U_DEC_APU_CMD_SEG_NUM

# Recorder
#
# Definition for OUTPUT_BUF_POOL
U_REC_OUTPUT_BUF_SIZE = 12288
U_REC_OUTPUT_BUF_SEG_NUM = 5
U_REC_OUTPUT_BUF_POOL_SIZE = U_REC_OUTPUT_BUF_SIZE * U_REC_OUTPUT_BUF_SEG_NUM

# Definition for MIC_IN_BUF_POOL
U_REC_MIC_IN_BUF_SIZE = 16384
U_REC_MIC_IN_BUF_SEG_NUM = 5
U_REC_MIC_IN_BUF_POOL_SIZE = U_REC_MIC_IN_BUF_SIZE * U_REC_MIC_IN_BUF_SEG_NUM

# Definition for ENC_APU_CMD_POOL
U_ENC_APU_CMD_SEG_NUM = 3
U_ENC_APU_CMD_POOL_SIZE = U_APU_CMD_SIZE * U_ENC_APU_CMD_SEG_NUM

# Definition for SRC_APU_CMD_POOL
U_SRC_APU_CMD_SEG_NUM = 3
U_SRC_APU_CMD_POOL_SIZE = U_APU_CMD_SIZE * U_SRC_APU_CMD_SEG_NUM

# SoundEffet
#
U_MIC_IN_BUF_SIZE = 480
U_MIC_IN_BUF_SEG_NUM = 5
U_MIC_IN_BUF_POOL_SIZE = U_MIC_IN_BUF_SIZE * U_MIC_IN_BUF_SEG_NUM

U_I2S_IN_BUF_SIZE = 960
U_I2S_IN_BUF_SEG_NUM = 5
U_I2S_IN_BUF_POOL_SIZE = U_I2S_IN_BUF_SIZE * U_I2S_IN_BUF_SEG_NUM

U_HP_OUT_BUF_SIZE = 960
U_HP_OUT_BUF_SEG_NUM = 5
U_HP_OUT_BUF_POOL_SIZE = U_HP_OUT_BUF_SIZE * U_HP_OUT_BUF_SEG_NUM

U_I2S_OUT_BUF_SIZE = 960
U_I2S_OUT_BUF_SEG_NUM = 5
U_I2S_OUT_BUF_POOL_SIZE = U_I2S_OUT_BUF_SIZE * U_I2S_OUT_BUF_SEG_NUM

U_MFE_OUT_BUF_SIZE = 160
U_MFE_OUT_BUF_SEG_NUM = 8
U_MFE_OUT_BUF_POOL_SIZE = U_MFE_OUT_BUF_SIZE * U_MFE_OUT_BUF_SEG_NUM

# For voice_filter (using both of player and recorder functions) example 
#
# Definition for DEC_ES_MAIN_BUF_POOL
U_VOF_DEC_ES_MAIN_BUF_SIZE = 4096 # (1024sample * 2ch * 2 bytes)
U_VOF_DEC_ES_MAIN_BUF_SEG_NUM = 4
U_VOF_DEC_ES_MAIN_BUF_POOL_SIZE = U_DEC_ES_MAIN_BUF_SIZE * U_DEC_ES_MAIN_BUF_SEG_NUM

# Definition for REND_PCM_BUF_POOL
U_VOF_REND_PCM_BUF_SIZE = 4100 #(1025sample * 2ch * 2bytes)
                               #(1025sample = 1024sample + 1sample for clock recovery)
U_VOF_REND_PCM_BUF_SEG_NUM = U_VOF_DEC_ES_MAIN_BUF_SEG_NUM + 1 # +1 because considering Flush extrusion by Stop command
U_VOF_REND_PCM_BUF_POOL_SIZE = U_VOF_REND_PCM_BUF_SIZE * U_VOF_REND_PCM_BUF_SEG_NUM

# Definition for SRC_WORK_MAIN_BUF_POOL
U_VOF_SRC_WORK_MAIN_BUF_SIZE = 4096 # (1024sample * 2ch * 2bytes)
U_VOF_SRC_WORK_MAIN_BUF_SEG_NUM = 1
U_VOF_SRC_WORK_MAIN_BUF_POOL_SIZE = U_VOF_SRC_WORK_MAIN_BUF_SIZE * U_VOF_SRC_WORK_MAIN_BUF_SEG_NUM;

# Definition for DEC_ES_SUB_BUF_POOL
U_VOF_DEC_ES_SUB_BUF_SIZE = 4096 # (1024 * 2ch * 2byte ) for Wav stream
U_VOF_DEC_ES_SUB_BUF_SEG_NUM = 4
U_VOF_DEC_ES_SUB_BUF_POOL_SIZE = U_VOF_DEC_ES_SUB_BUF_SIZE * U_VOF_DEC_ES_SUB_BUF_SEG_NUM

# Definition for REND_PCM_SUB_BUF_POOL
U_VOF_REND_PCM_SUB_BUF_SIZE = 4100 #(1025sample * 2ch * 2bytes)
                                   #(1025sample = 1024sample + 1sample for clock recovery)
U_VOF_REND_PCM_SUB_BUF_SEG_NUM = U_VOF_DEC_ES_SUB_BUF_SEG_NUM + 1  # +1 because considering Flush extrusion by Stop command
U_VOF_REND_PCM_SUB_BUF_POOL_SIZE = U_VOF_REND_PCM_SUB_BUF_SIZE * U_VOF_REND_PCM_SUB_BUF_SEG_NUM

# Definition for SRC_WORK_SUB_BUF_POOL
U_VOF_SRC_WORK_SUB_BUF_SIZE = 4096 # (1024sample * 2ch * 2bytes)
U_VOF_SRC_WORK_SUB_BUF_SEG_NUM = 1
U_VOF_SRC_WORK_SUB_BUF_POOL_SIZE = U_VOF_SRC_WORK_SUB_BUF_SIZE * U_VOF_SRC_WORK_SUB_BUF_SEG_NUM;

# Definition for PF0/1_PCM_BUF_POOL
U_VOF_POF_PCM_BUF_SIZE = U_VOF_REND_PCM_BUF_SIZE
U_VOF_POF_PCM_BUF_SEG_NUM = 1
U_VOF_POF_PCM_BUF_POOL_SIZE = U_VOF_POF_PCM_BUF_SIZE * U_VOF_POF_PCM_BUF_SEG_NUM
 
# Definition for OUTPUT_BUF_POOL
U_VOF_ENC_OUTPUT_BUF_SIZE = 3072 #(768sample * 2ch * 2byte) for LPCM
U_VOF_ENC_OUTPUT_BUF_SEG_NUM = 2
U_VOF_ENC_OUTPUT_BUF_POOL_SIZE = U_VOF_ENC_OUTPUT_BUF_SIZE * U_VOF_ENC_OUTPUT_BUF_SEG_NUM

# Definition for MIC_IN_BUF_POOL
U_VOF_MIC_IN_BUF_SIZE = 3072 #(768sample * 2ch * 2byte) for LPCM
U_VOF_MIC_IN_BUF_SEG_NUM = 5
U_VOF_MIC_IN_BUF_POOL_SIZE = U_VOF_MIC_IN_BUF_SIZE * U_VOF_MIC_IN_BUF_SEG_NUM

U_SENSOR_DSP_CMD_SIZE = 0x70  # sizeof(SensorDspCmd) = 0x68 + reserved
U_SENSOR_DSP_CMD_SEG_NUM = 8
U_SENSOR_DSP_CMD_POOL_SIZE = U_SENSOR_DSP_CMD_SIZE * U_SENSOR_DSP_CMD_SEG_NUM

U_ACCEL_DATA_BUF_SIZE = 0x180  # (float(x,y,z) * WaterMarkSize) =12 * 32 = 0x180
U_ACCEL_DATA_BUF_SEG_NUM = 8
U_ACCEL_DATA_BUF_POOL_SIZE = U_ACCEL_DATA_BUF_SIZE * U_ACCEL_DATA_BUF_SEG_NUM

U_MAG_DATA_BUF_SIZE = 0x1E0    # (float(x,y,z) * WaterMarkSize) = 12 * 40 = 0x1E0
U_MAG_DATA_BUF_SEG_NUM = 8
U_MAG_DATA_BUF_POOL_SIZE = U_ACCEL_DATA_BUF_SIZE * U_ACCEL_DATA_BUF_SEG_NUM

U_PRESS_DATA_BUF_SIZE = 0xA0   # (uint32_t * WaterMarkSize) = 4 * 40 = 0xA0
U_PRESS_DATA_BUF_SEG_NUM = 8
U_PRESS_DATA_BUF_POOL_SIZE = U_PRESS_DATA_BUF_SIZE * U_PRESS_DATA_BUF_SEG_NUM

U_TEMP_DATA_BUF_SIZE = 0xA0    # (uint32_t * WaterMarkSize) = 4 * 40 = 0xA0
U_TEMP_DATA_BUF_SEG_NUM = 8
U_TEMP_DATA_BUF_POOL_SIZE = U_TEMP_DATA_BUF_SIZE * U_TEMP_DATA_BUF_SEG_NUM

#
# Definition of pool layouts
#

PoolAreas.init(
  [ # layout 0 for Player
    #[ name,                  area,              align,        pool-size,                    seg,                        fence]
    ["DEC_ES_MAIN_BUF_POOL",  "COMMON_WORK_AREA", U_STD_ALIGN,  U_DEC_ES_MAIN_BUF_POOL_SIZE,  U_DEC_ES_MAIN_BUF_SEG_NUM,  true ],
    ["REND_PCM_BUF_POOL",     "COMMON_WORK_AREA", U_STD_ALIGN,  U_REND_PCM_BUF_POOL_SIZE,     U_REND_PCM_BUF_SEG_NUM,     true ],
    ["SRC_WORK_MAIN_BUF_POOL","COMMON_WORK_AREA", U_STD_ALIGN,  U_SRC_WORK_MAIN_BUF_POOL_SIZE,U_SRC_WORK_MAIN_BUF_SEG_NUM,true ],
    ["DEC_ES_SUB_BUF_POOL",   "COMMON_WORK_AREA", U_STD_ALIGN,  U_DEC_ES_SUB_BUF_POOL_SIZE,   U_DEC_ES_SUB_BUF_SEG_NUM,   true ],
    ["REND_PCM_SUB_BUF_POOL", "COMMON_WORK_AREA", U_STD_ALIGN,  U_REND_PCM_SUB_BUF_POOL_SIZE, U_REND_PCM_SUB_BUF_SEG_NUM, true ],
    ["SRC_WORK_SUB_BUF_POOL", "COMMON_WORK_AREA", U_STD_ALIGN,  U_SRC_WORK_SUB_BUF_POOL_SIZE, U_SRC_WORK_SUB_BUF_SEG_NUM, true ],
    ["DEC_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_DEC_APU_CMD_POOL_SIZE,      U_DEC_APU_CMD_SEG_NUM,      true ],
    ["PF0_PCM_BUF_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_POF_PCM_BUF_SIZE,           U_POF_PCM_BUF_SEG_NUM,      true ],
    ["PF1_PCM_BUF_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_POF_PCM_BUF_SIZE,           U_POF_PCM_BUF_SEG_NUM,      true ],
    ["PF0_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_DEC_APU_CMD_POOL_SIZE,      U_DEC_APU_CMD_SEG_NUM,      true ],
    ["PF1_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_DEC_APU_CMD_POOL_SIZE,      U_DEC_APU_CMD_SEG_NUM,      true ],
    nil # end of each layout
  ], # end of layout 0

  [ # layout 1 for Recorder
   #[ name,                   area,              align,        pool-size,                  seg,                      fence]
    ["OUTPUT_BUF_POOL",       "COMMON_WORK_AREA", U_STD_ALIGN,  U_REC_OUTPUT_BUF_POOL_SIZE, U_REC_OUTPUT_BUF_SEG_NUM, true],
    ["MIC_IN_BUF_POOL",       "COMMON_WORK_AREA", U_STD_ALIGN,  U_REC_MIC_IN_BUF_POOL_SIZE, U_REC_MIC_IN_BUF_SEG_NUM, true],
    ["ENC_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_ENC_APU_CMD_POOL_SIZE,    U_ENC_APU_CMD_SEG_NUM,    true],
    ["SRC_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_SRC_APU_CMD_POOL_SIZE,    U_SRC_APU_CMD_SEG_NUM,    true],
    nil # end of each layout
  ], # end of layout 1

  [ # layout 2 for SoundEffet
    #[ name,             area,              align,       pool-size,               seg,                   fence]
    ["MIC_IN_BUF_POOL",  "COMMON_WORK_AREA", U_STD_ALIGN, U_MIC_IN_BUF_POOL_SIZE,  U_MIC_IN_BUF_SEG_NUM,  true ],
    ["I2S_IN_BUF_POOL",  "COMMON_WORK_AREA", U_STD_ALIGN, U_I2S_IN_BUF_POOL_SIZE,  U_I2S_IN_BUF_SEG_NUM,  true ],
    ["HP_OUT_BUF_POOL",  "COMMON_WORK_AREA", U_STD_ALIGN, U_HP_OUT_BUF_POOL_SIZE,  U_HP_OUT_BUF_SEG_NUM,  true ],
    ["I2S_OUT_BUF_POOL", "COMMON_WORK_AREA", U_STD_ALIGN, U_I2S_OUT_BUF_POOL_SIZE, U_I2S_OUT_BUF_SEG_NUM, true ],
    ["MFE_OUT_BUF_POOL", "COMMON_WORK_AREA", U_STD_ALIGN, U_MFE_OUT_BUF_POOL_SIZE, U_MFE_OUT_BUF_SEG_NUM, true ],
    nil # end of each layout
  ], # end of layout 2
  
  [ # layout 3 for Recording and playing same simultaneously
  #[ name,                    area,              align,        pool-size,                         seg,                             fence]
    ["DEC_ES_MAIN_BUF_POOL",  "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_DEC_ES_MAIN_BUF_POOL_SIZE,   U_VOF_DEC_ES_MAIN_BUF_SEG_NUM,   true ],
    ["REND_PCM_BUF_POOL",     "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_REND_PCM_BUF_POOL_SIZE,      U_VOF_REND_PCM_BUF_SEG_NUM,      true ],
    ["SRC_WORK_MAIN_BUF_POOL","COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_SRC_WORK_MAIN_BUF_POOL_SIZE, U_VOF_SRC_WORK_MAIN_BUF_SEG_NUM, true ],
    ["DEC_ES_SUB_BUF_POOL",   "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_DEC_ES_SUB_BUF_POOL_SIZE,    U_VOF_DEC_ES_SUB_BUF_SEG_NUM,    true ],
    ["REND_PCM_SUB_BUF_POOL", "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_REND_PCM_SUB_BUF_POOL_SIZE,  U_VOF_REND_PCM_SUB_BUF_SEG_NUM,  true ],
    ["SRC_WORK_SUB_BUF_POOL", "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_SRC_WORK_SUB_BUF_POOL_SIZE,  U_VOF_SRC_WORK_SUB_BUF_SEG_NUM,  true ],
    ["DEC_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_DEC_APU_CMD_POOL_SIZE,           U_DEC_APU_CMD_SEG_NUM,           true ],
    ["PF0_PCM_BUF_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_POF_PCM_BUF_POOL_SIZE,       U_VOF_POF_PCM_BUF_SEG_NUM,       true ],
    ["PF1_PCM_BUF_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_POF_PCM_BUF_POOL_SIZE,       U_VOF_POF_PCM_BUF_SEG_NUM,       true ],
    ["PF0_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_DEC_APU_CMD_POOL_SIZE,           U_DEC_APU_CMD_SEG_NUM,           true ],
    ["PF1_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_DEC_APU_CMD_POOL_SIZE,           U_DEC_APU_CMD_SEG_NUM,           true ],

    ["OUTPUT_BUF_POOL",       "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_ENC_OUTPUT_BUF_POOL_SIZE,    U_VOF_ENC_OUTPUT_BUF_SEG_NUM,    true ],
    ["MIC_IN_BUF_POOL",       "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_MIC_IN_BUF_POOL_SIZE,        U_VOF_MIC_IN_BUF_SEG_NUM,        true ],
    ["ENC_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_ENC_APU_CMD_POOL_SIZE,           U_ENC_APU_CMD_SEG_NUM,           true ],
    ["SRC_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_SRC_APU_CMD_POOL_SIZE,           U_SRC_APU_CMD_SEG_NUM,           true ],
    nil # end of each layout
  ], # end of layout 3

  [ # layout 4 for Sesnsing only
    #[ name,                     area,               align,       pool-size,                   seg,                        fence]
     ["SENSOR_DSP_CMD_BUF_POOL", "COMMON_WORK_AREA", U_STD_ALIGN, U_SENSOR_DSP_CMD_POOL_SIZE,  U_SENSOR_DSP_CMD_SEG_NUM,   false],
     ["ACCEL_DATA_BUF_POOL",     "COMMON_WORK_AREA", U_STD_ALIGN, U_ACCEL_DATA_BUF_POOL_SIZE,  U_ACCEL_DATA_BUF_SEG_NUM,   false],
     ["MAG_DATA_BUF_POOL",       "COMMON_WORK_AREA", U_STD_ALIGN, U_MAG_DATA_BUF_POOL_SIZE,    U_MAG_DATA_BUF_SEG_NUM,     false],
     ["PRESS_DATA_BUF_POOL",     "COMMON_WORK_AREA", U_STD_ALIGN, U_PRESS_DATA_BUF_POOL_SIZE,  U_PRESS_DATA_BUF_SEG_NUM,   false],
     ["TEMP_DATA_BUF_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN, U_TEMP_DATA_BUF_POOL_SIZE,   U_TEMP_DATA_BUF_SEG_NUM,    false],
     nil # end of each layout
  ], # end of layout 4

  [ # layout 5 for Recording and playing same simultaneously & sensor
  #[ name,                    area,              align,        pool-size,                         seg,                             fence]
    ["DEC_ES_MAIN_BUF_POOL",  "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_DEC_ES_MAIN_BUF_POOL_SIZE,   U_VOF_DEC_ES_MAIN_BUF_SEG_NUM,   true ],
    ["REND_PCM_BUF_POOL",     "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_REND_PCM_BUF_POOL_SIZE,      U_VOF_REND_PCM_BUF_SEG_NUM,      true ],
    ["SRC_WORK_MAIN_BUF_POOL","COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_SRC_WORK_MAIN_BUF_POOL_SIZE, U_VOF_SRC_WORK_MAIN_BUF_SEG_NUM, true ],
    ["DEC_ES_SUB_BUF_POOL",   "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_DEC_ES_SUB_BUF_POOL_SIZE,    U_VOF_DEC_ES_SUB_BUF_SEG_NUM,    true ],
    ["REND_PCM_SUB_BUF_POOL", "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_REND_PCM_SUB_BUF_POOL_SIZE,  U_VOF_REND_PCM_SUB_BUF_SEG_NUM,  true ],
    ["SRC_WORK_SUB_BUF_POOL", "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_SRC_WORK_SUB_BUF_POOL_SIZE,  U_VOF_SRC_WORK_SUB_BUF_SEG_NUM,  true ],
    ["DEC_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_DEC_APU_CMD_POOL_SIZE,           U_DEC_APU_CMD_SEG_NUM,           true ],
    ["PF0_PCM_BUF_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_POF_PCM_BUF_POOL_SIZE,       U_VOF_POF_PCM_BUF_SEG_NUM,       true ],
    ["PF1_PCM_BUF_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_POF_PCM_BUF_POOL_SIZE,       U_VOF_POF_PCM_BUF_SEG_NUM,       true ],
    ["PF0_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_DEC_APU_CMD_POOL_SIZE,           U_DEC_APU_CMD_SEG_NUM,           true ],
    ["PF1_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_DEC_APU_CMD_POOL_SIZE,           U_DEC_APU_CMD_SEG_NUM,           true ],

    ["OUTPUT_BUF_POOL",       "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_ENC_OUTPUT_BUF_POOL_SIZE,    U_VOF_ENC_OUTPUT_BUF_SEG_NUM,    true ],
    ["MIC_IN_BUF_POOL",       "COMMON_WORK_AREA", U_STD_ALIGN,  U_VOF_MIC_IN_BUF_POOL_SIZE,        U_VOF_MIC_IN_BUF_SEG_NUM,        true ],
    ["ENC_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_ENC_APU_CMD_POOL_SIZE,           U_ENC_APU_CMD_SEG_NUM,           true ],
    ["SRC_APU_CMD_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN,  U_SRC_APU_CMD_POOL_SIZE,           U_SRC_APU_CMD_SEG_NUM,           true ],
    # Sensor
    ["SENSOR_DSP_CMD_BUF_POOL", "COMMON_WORK_AREA", U_STD_ALIGN, U_SENSOR_DSP_CMD_POOL_SIZE,  U_SENSOR_DSP_CMD_SEG_NUM,   false],
    ["ACCEL_DATA_BUF_POOL",     "COMMON_WORK_AREA", U_STD_ALIGN, U_ACCEL_DATA_BUF_POOL_SIZE,  U_ACCEL_DATA_BUF_SEG_NUM,   false],
    ["MAG_DATA_BUF_POOL",       "COMMON_WORK_AREA", U_STD_ALIGN, U_MAG_DATA_BUF_POOL_SIZE,    U_MAG_DATA_BUF_SEG_NUM,     false],
    ["PRESS_DATA_BUF_POOL",     "COMMON_WORK_AREA", U_STD_ALIGN, U_PRESS_DATA_BUF_POOL_SIZE,  U_PRESS_DATA_BUF_SEG_NUM,   false],
    ["TEMP_DATA_BUF_POOL",      "COMMON_WORK_AREA", U_STD_ALIGN, U_TEMP_DATA_BUF_POOL_SIZE,   U_TEMP_DATA_BUF_SEG_NUM,    false],
    nil # end of each layout
  ], # end of layout 4

  nil # end of definition
)

# generate header files
generate_files
